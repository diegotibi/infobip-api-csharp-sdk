using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using Newtonsoft.Json;

namespace Infobip.Api.SDK.Email.Models
{
    /// <summary>
    /// SendFullyFeaturedEmailRequest
    /// </summary>
    public class SendFullyFeaturedEmailRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendFullyFeaturedEmailRequest" /> class.
        /// </summary>
        public SendFullyFeaturedEmailRequest()
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendFullyFeaturedEmailRequest" /> class.
        /// </summary>
        /// <param name="from">Email address with optional sender name.</param>
        /// <param name="to">Email address of the recipient.</param>
        /// <param name="subject"></param>
        /// <param name="cc">CC recipient email address.</param>
        /// <param name="bcc">BCC recipient email address.</param>
        /// <param name="text">Body of message.</param>
        /// <param name="bulkId">The ID uniquely identifies the sent Email request. This filter will enable you to query delivery reports for all the messages using just one request. You will receive a bulkId in the response after sending an Email request. If you don't set your own bulkId, unique ID will be generated by our system and returned in the API response. (Optional Field)</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent for a recipient. (Optional Field)</param>
        /// <param name="templateId">Template identifier based on which the email message is generated. The template is created over Infobip web interface. If templateId is present then html and text values are ignored. NOTE : This field supports value of broadcast templateId only.Content templateId is not supported.</param>
        /// <param name="attachment">File attachment</param>
        /// <param name="inlineImage">Using an inline image, it is possible to insert the image file inside the HTML code of the email by using cid:FILENAME instead of providing any external link to image.</param>
        /// <param name="html">HTML body of the message. If HTML and text fields are present, text field will be ignored and HTML will be delivered as message body.</param>
        /// <param name="replyTo">Email address to which recipients of the email can reply.</param>
        /// <param name="defaultPlaceholders">Default placeholder values used for all recipients. The values are used to generate the email message.</param>
        /// <param name="preserveRecipients">This parameter enables preserving To recipients for an email when value is true, default value is false for this parameter.</param>
        /// <param name="trackingUrl">The URL on your callback server on which the open and click notifications will be sent. If you are passing this parameter then track=true will be assigned, you don't need to pass track=true separately. See the section "Tracking Notifications" below for details.</param>
        /// <param name="trackClicks">This parameter enables or disables track click feature.</param>
        /// <param name="trackOpens">This parameter enables or disables track open feature.</param>
        /// <param name="track">Enable or disable open and click tracking.Default value is true. Passing true will only enable tracking and the statistics would be visible in web interface alone. This can be explicitly overridden by trackopens and trackclikcs.</param>
        /// <param name="callbackData">Additional client data that will be sent on the notifyUrl. The maximum value is 4000 characters.</param>
        /// <param name="intermediateReport">The real-time Intermediate delivery report that will be sent on your callback server.</param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent.</param>
        /// <param name="notifyContentType">Preferred Delivery report content type. Can be application/json or application/xml.</param>
        /// <param name="sendAt">To schedule message at a given time in future. Time provided should be in UTC in following format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX.</param>
        /// <param name="landingPagePlaceholders">Personalize opt out landing page by inserting placeholders. Insert placeholder or tag while designing landing page.</param>
        /// <param name="landingPageId">Opt out landing page which will be used and displayed once end user clicks unsubscribe link. If not present default opt out landing page will be displayed. Create landing page on IB’s portal and use last 6 digits from URL to use that opt out page.</param>
        public SendFullyFeaturedEmailRequest(string from, string to, string subject,
            string cc = default, string bcc = default, string text = default, string bulkId = default, 
            string messageId = default, int? templateId = default, Stream attachment = default, Stream inlineImage = default, 
            string html = default, string replyTo = default, string defaultPlaceholders = default, 
            bool? preserveRecipients = default, string trackingUrl = default, bool? trackClicks = default, 
            bool? trackOpens = default, bool? track = default, string callbackData = default, bool? intermediateReport = default, 
            string notifyUrl = default, string notifyContentType = default, DateTime? sendAt = default, 
            string landingPagePlaceholders = default, string landingPageId = default)
        {
            From = from ?? throw new ArgumentNullException(nameof(from));
            To = to ?? throw new ArgumentNullException(nameof(to));
            Subject = subject ?? throw new ArgumentNullException(nameof(subject));
            Cc = cc;
            Bcc = bcc;
            Text = text;
            BulkId = bulkId;
            MessageId = messageId;
            TemplateId = templateId;
            Attachment = attachment;
            InlineImage = inlineImage;
            Html = html;
            ReplyTo = replyTo;
            DefaultPlaceholders = defaultPlaceholders;
            PreserveRecipients = preserveRecipients;
            TrackingUrl = trackingUrl;
            TrackClicks = trackClicks;
            TrackOpens = trackOpens;
            Track = track;
            CallbackData = callbackData;
            IntermediateReport = intermediateReport;
            NotifyUrl = notifyUrl;
            NotifyContentType = notifyContentType;
            SendAt = sendAt;
            LandingPagePlaceholders = landingPagePlaceholders;
            LandingPageId = landingPageId;
        }

        /// <summary>
        /// Email address with optional sender name.
        /// </summary>
        [JsonProperty("from")]
        [Required]
        public string From { get; }

        /// <summary>
        /// Email address of the recipient.
        /// </summary>
        [JsonProperty("to")]
        [Required]
        public string To { get; }

        /// <summary>
        /// Message subject.
        /// </summary>
        [JsonProperty("subject")]
        [Required]
        public string Subject { get; }

        /// <summary>
        /// CC recipient email address.
        /// </summary>
        [JsonProperty("cc")]
        public string Cc { get; }

        /// <summary>
        /// BCC recipient email address.
        /// </summary>
        [JsonProperty("bcc")]
        public string Bcc { get; }

        /// <summary>
        /// Body of message.
        /// </summary>
        [JsonProperty("text")]
        public string Text { get; }

        /// <summary>
        /// The ID uniquely identifies the sent Email request. This filter will enable you to query delivery reports for all the messages using just one request. You will receive a bulkId in the response after sending an Email request. If you don't set your own bulkId, unique ID will be generated by our system and returned in the API response. (Optional Field)
        /// </summary>
        [JsonProperty("bulkId")]
        public string BulkId { get; }

        /// <summary>
        /// The ID that uniquely identifies the message sent for a recipient. (Optional Field)
        /// </summary>
        [JsonProperty("messageId")]
        public string MessageId { get; }

        /// <summary>
        /// Template identifier based on which the email message is generated. The template is created over Infobip web interface. If templateId is present then html and text values are ignored. NOTE : This field supports value of broadcast templateId only.Content templateId is not supported.
        /// </summary>
        [JsonProperty("templateid")]
        public int? TemplateId { get; }

        /// <summary>
        /// File attachment
        /// </summary>
        [JsonProperty("attachment")]
        public Stream Attachment { get; }

        /// <summary>
        /// Using an inline image, it is possible to insert the image file inside the HTML code of the email by using cid:FILENAME instead of providing any external link to image.
        /// </summary>
        [JsonProperty("inlineImage")]
        public Stream InlineImage { get; }

        /// <summary>
        /// HTML body of the message. If HTML and text fields are present, text field will be ignored and HTML will be delivered as message body.
        /// </summary>
        [JsonProperty("HTML")]
        public string Html { get; }

        /// <summary>
        /// mail address to which recipients of the email can reply.
        /// </summary>
        [JsonProperty("replyto")]
        public string ReplyTo { get; }

        /// <summary>
        /// Default placeholder values used for all recipients. The values are used to generate the email message.
        /// </summary>
        [JsonProperty("defaultplaceholders")]
        public string DefaultPlaceholders { get; }

        /// <summary>
        /// This parameter enables preserving To recipients for an email when value is true, default value is false for this parameter.
        /// </summary>
        [JsonProperty("preserverecipients")]
        public bool? PreserveRecipients { get; }

        /// <summary>
        /// The URL on your callback server on which the open and click notifications will be sent. If you are passing this parameter then track=true will be assigned, you don't need to pass track=true separately. See the section "Tracking Notifications" below for details.
        /// </summary>
        [JsonProperty("trackingUrl")]
        public string TrackingUrl { get; }

        /// <summary>
        /// This parameter enables or disables track click feature.
        /// </summary>
        [JsonProperty("trackclicks")]
        public bool? TrackClicks { get; }

        /// <summary>
        /// This parameter enables or disables track open feature.
        /// </summary>
        [JsonProperty("trackopens")]
        public bool? TrackOpens { get; }

        /// <summary>
        /// Enable or disable open and click tracking.Default value is true. Passing true will only enable tracking and the statistics would be visible in web interface alone. This can be explicitly overridden by trackopens and trackclikcs.
        /// </summary>
        [JsonProperty("track")]
        public bool? Track { get; }

        /// <summary>
        /// Additional client data that will be sent on the notifyUrl. The maximum value is 4000 characters.
        /// </summary>
        [JsonProperty("callbackData")]
        [MaxLength(4000)]
        public string CallbackData { get; }

        /// <summary>
        /// The real-time Intermediate delivery report that will be sent on your callback server.
        /// </summary>
        [JsonProperty("intermediateReport")]
        public bool? IntermediateReport { get; }

        /// <summary>
        /// The URL on your callback server on which the Delivery report will be sent.
        /// </summary>
        [JsonProperty("notifyUrl")]
        public string NotifyUrl { get; }

        /// <summary>
        /// Preferred Delivery report content type. Can be application/json or application/xml.
        /// </summary>
        [JsonProperty("notifyContentType")]
        public string NotifyContentType { get; }

        /// <summary>
        /// To schedule message at a given time in future. Time provided should be in UTC in following format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX.
        /// </summary>
        [JsonProperty("sendAt")]
        public DateTime? SendAt { get; }

        /// <summary>
        /// Personalize opt out landing page by inserting placeholders. Insert placeholder or tag while designing landing page.
        /// </summary>
        [JsonProperty("landingPagePlaceholders")]
        public string LandingPagePlaceholders { get; }

        /// <summary>
        /// Opt out landing page which will be used and displayed once end user clicks unsubscribe link. If not present default opt out landing page will be displayed. Create landing page on IB’s portal and use last 6 digits from URL to use that opt out page.
        /// </summary>
        [JsonProperty("landingPageId")]
        public string LandingPageId { get; }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var allowedTypes = new[] { "application/json", "application/xml" };

            if (NotifyContentType != null && !allowedTypes.Contains(NotifyContentType))
            {
                yield return new ValidationResult(
                    $"Invalid value for {nameof(NotifyContentType)}, must be one of: {string.Join(", ", allowedTypes)}",
                    new[] { nameof(NotifyContentType) });
            }
        }
    }
}
